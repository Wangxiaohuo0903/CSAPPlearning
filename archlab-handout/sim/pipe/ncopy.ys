#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	
	jmp StartLoop4

Loop4:	
	mrmovq (%rdi), %r8	# read val from src...
	mrmovq 8(%rdi), %r9
	mrmovq 16(%rdi), %r10	# read val from src...
	mrmovq 24(%rdi), %r11
	rmmovq %r8, (%rsi) # ...and store it to dst
	rmmovq %r9, 8(%rsi)	
	rmmovq %r10, 16(%rsi)
	rmmovq %r11, 24(%rsi)
	andq %r8, %r8		# val <= 0?
	jle Npos0		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos0:
	andq %r9,%r9
	jle Npos3		# if so, goto Npos:
	iaddq $1, %rax
Npos3:		# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos4		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos4:
	andq %r11,%r11	
	jle Npos5		# if so, goto Npos:
	iaddq $1, %rax
Npos5:		
	mrmovq 32(%rdi), %r8	# read val from src...
	mrmovq 40(%rdi), %r9
	mrmovq 48(%rdi), %r10	# read val from src...
	mrmovq 56(%rdi), %r11
	rmmovq %r8, 32(%rsi)
	rmmovq %r9, 40(%rsi)
	rmmovq %r10, 48(%rsi)
	rmmovq %r11, 56(%rsi)
		# ...and store it to dst
	andq %r8, %r8		# val <= 0?
	jle Npos6		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos6:

	andq %r9,%r9	
	jle Npos7		# if so, goto Npos:
	iaddq $1, %rax
Npos7:	

		# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos8		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos8:

	andq %r11,%r11	
	jle Npos9		# if so, goto Npos:
	iaddq $1, %rax
Npos9:		
	mrmovq 64(%rdi), %r8	# read val from src...
	mrmovq 72(%rdi), %r9
	rmmovq %r8, 64(%rsi)
	rmmovq %r9, 72(%rsi)
	andq %r8, %r8		# val <= 0?
	jle Npos10		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos10:
	andq %r9,%r9	
	jle Npos11		# if so, goto Npos:
	iaddq $1, %rax
Npos11:		
	iaddq $80, %rdi		# src++
	iaddq $80, %rsi		# dst++	

StartLoop4:
	iaddq $-10,%rdx  # len-=2
	jge Loop4
	iaddq $10,%rdx
	jmp StartLoop2
Loop2:	
	mrmovq (%rdi), %r8	# read val from src...
	mrmovq 8(%rdi), %r9
	rmmovq %r8, (%rsi)
	rmmovq %r9, 8(%rsi)	
	andq %r8, %r8		# val <= 0?
	jle Npos		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos:
	andq %r9,%r9	
	jle Npos1		# if so, goto Npos:
	iaddq $1, %rax
Npos1:		
	iaddq $16, %rdi		# src++
	iaddq $16, %rsi		# dst++
	# ...and store it to dst
StartLoop2:
	iaddq $-2,%rdx  # len-=2
	jge Loop2
	mrmovq (%rdi),%rbx
	iaddq $1,%rdx
	jne Done
	rmmovq %rbx,(%rsi)
	andq %rbx,%rbx
	jle Done
	iaddq $1,%rax
##################################################################
# Do not modify the following section of code
# Function epilogue.

Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
